{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import asyncio\n",
    "import os\n",
    "\n",
    "import pycoq.opam\n",
    "import pycoq.common\n",
    "import pycoq.agent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def test_serapi_installed():\n",
    "    ''' tests if coq-serapi installation is OK, installs if missing '''\n",
    "    assert pycoq.opam.opam_install_serapi()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def test_autoagent():\n",
    "    coq_ctxt = pycoq.common.CoqContext(pwd=os.getcwd(), executable='', target='serapi_shell')\n",
    "    cfg = pycoq.opam.opam_serapi_cfg(coq_ctxt)\n",
    "\n",
    "    res = await pycoq.agent.evaluate_agent(cfg, pycoq.agent.auto_agent,\n",
    "                     \"Theorem th_4_2_9: forall A B C D: Prop, A->(A->B)->(B->C)->(C->D)->D.\",\n",
    "                                                 agent_parameters={'auto_limit':5},\n",
    "                      logfname='autoagent/agent10.log')\n",
    "\n",
    "    assert res == 4  # correct depth of proof is 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "process with 47784 started as\n",
      "cmd:  ['opam', 'exec', '--root', '/home/pestun/dataset100', '--switch', 'ocaml-variants.4.07.1+flambda_coq-serapi.8.11.0+0.11.1', '--', 'sertop', '--topfile', 'serapi_shell']\n",
      "cwd  /home/pestun/code/pycoq/tests\n",
      "agent: have 1 goals to solve\n",
      "agent: trying default auto tactics\n",
      "agent: auto 0 tactic is completed with result (4, 34, [], [3])\n",
      "agent: have 1 goals to solve\n",
      "agent: trying default auto tactics\n",
      "agent: auto 1 tactic is completed with result (7, 45, [], [4])\n",
      "agent: have 1 goals to solve\n",
      "agent: trying default auto tactics\n",
      "agent: auto 2 tactic is completed with result (10, 56, [], [5])\n",
      "agent: have 1 goals to solve\n",
      "agent: trying default auto tactics\n",
      "agent: auto 3 tactic is completed with result (13, 67, [], [6])\n",
      "agent: have 1 goals to solve\n",
      "agent: trying default auto tactics\n",
      "agent: auto 4 tactic is completed with result (16, 78, [], [7])\n",
      "agent: Success, all goals are solved with auto 4.\n"
     ]
    }
   ],
   "source": [
    "test_serapi_installed()\n",
    "await test_autoagent()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pycoq",
   "language": "python",
   "name": "pycoq"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
